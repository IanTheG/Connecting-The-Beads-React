var helpers = require("../../node_modules/@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
helpers.prelude(module);
try {
  var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
  _parcelHelpers.defineInteropFlag(exports);
  var _react = require('react');
  var _reactDefault = _parcelHelpers.interopDefault(_react);
  var _reactRouter = require('react-router');
  var _utilsInterfaces = require('../utils/interfaces');
  var _utilsFunctions = require('../utils/functions');
  var _utilsApi = require('../utils/api');
  var _utilsApiDefault = _parcelHelpers.interopDefault(_utilsApi);
  var _Decade = require('./Decade');
  var _DecadeDefault = _parcelHelpers.interopDefault(_Decade);
  var _jsxFileName = "/Users/iantheg/Documents/Git/Connecting-The-Beads/client/public/components/Mystery.tsx", _s = $RefreshSig$(), _s2 = $RefreshSig$();
  const Mystery = () => {
    _s();
    const history = _reactRouter.useHistory();
    const location = _reactRouter.useLocation();
    // Sets a default state for location, otherwise crashes app
    const location2 = {
      ...location,
      state: location.state ? location.state : {
        decade: 0
      }
    };
    const {mystery} = _reactRouter.useParams();
    const [currentMystery, setCurrentMystery] = _react.useState();
    const [currentDecade, setCurrentDecade] = _react.useState(_utilsInterfaces.initialState);
    // Initializes the chosen mystery in state (prevents repeated server GET requests)
    _react.useEffect(() => {
      _utilsFunctions.fadeAnimation();
      let mounted = true;
      const initializeMystery = async () => {
        const chosenMystery = await _utilsApiDefault.default(mystery);
        if (chosenMystery) setCurrentMystery(chosenMystery.data);
      };
      mounted && initializeMystery();
      return () => {
        mounted = false;
      };
    }, []);
    // Re-renders when state in location object changes or mystery changes, enables forward-backward navigation
    _react.useEffect(() => {
      currentMystery && setCurrentDecade(currentMystery.decades[location2.state.decade]);
    }, [currentMystery, location2.state.decade]);
    return currentMystery ? /*#__PURE__*/_reactDefault.default.createElement(_DecadeDefault.default, {
      mysteryName: mystery,
      currentDecade: currentDecade,
      __self: undefined,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 52,
        columnNumber: 9
      }
    }) : /*#__PURE__*/_reactDefault.default.createElement(Loading, {
      mysteryName: mystery,
      __self: undefined,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 53,
        columnNumber: 9
      }
    });
  };
  _s(Mystery, "SdPqMw3WneCBQQ3I+9bTV3HUuAI=", false, function () {
    return [_reactRouter.useHistory, _reactRouter.useLocation, _reactRouter.useParams];
  });
  _c = Mystery;
  exports.default = Mystery;
  const Loading = ({mysteryName}) => {
    _s2();
    _react.useEffect(() => {
      _utilsFunctions.fadeAnimation();
    });
    return (
      /*#__PURE__*/_reactDefault.default.createElement("div", {
        className: "container",
        style: {
          alignItems: 'center',
          justifyContent: 'center'
        },
        __self: undefined,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 66,
          columnNumber: 5
        }
      }, /*#__PURE__*/_reactDefault.default.createElement("h2", {
        style: {
          textAlign: 'center'
        },
        __self: undefined,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 67,
          columnNumber: 7
        }
      }, "Loading the ", mysteryName.charAt(0).toUpperCase() + mysteryName.slice(1), " Mysteries"))
    );
  };
  _s2(Loading, "OD7bBpZva5O2jO+Puf00hKivP7c=");
  _c2 = Loading;
  var _c, _c2;
  $RefreshReg$(_c, "Mystery");
  $RefreshReg$(_c2, "Loading");
  helpers.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
